version: "3"

services:
  mongodb:
    image: mongo:latest
    container_name: blue_origin_mongodb
    volumes:
        - ./.docker/db/:/data/
    expose: 
        - "27018"
    ports:
        - "27018:27017"
  
  waitforservices1:
    image: dadarek/wait-for-dependencies
    depends_on:
      - zookeeper 
    command: zookeeper:2181
    


  waitforservices2:
    image: dadarek/wait-for-dependencies
    depends_on:
      - kafka 
    command: kafka:9092
    

  waitforservices3:
    image: dadarek/wait-for-dependencies
    depends_on:
      - rocket-service
      - weather-service 
      - mission-service
      - booster-service
      - payload-service
      - real-time-service
      - telemetry-writer-service
      - telemetry-listener-service
      - missions-coordinator-service
      - telemetry-analyser-service
      - poll-service
      - waitforservices1
      - waitforservices2
    command: rocket-service:3000 weather-service:3001 mission-service:3002 telemetry-writer-service:3003 booster-service:3004 payload-service:3005 real-time-service:3006 telemetry-listener-service:3007 missions-coordinator-service:3008 telemetry-analyser-service:3009 poll-service:3012 anomaly-handler-service:3013
    

  telemetry-writer-service:
    image: blue_origin/telemetry-writer-service
    container_name: telemetry-writer-container
    build: 
      context: .
      dockerfile: ./back/telemetry-writer-service/Dockerfile
    expose:
      - "3003"
    ports:
      - "3003:3003"
    volumes:
      - ./container-logs:/usr/src/app/logs
    environment:
      - PORT=3003
      - HOST_IP=kafka
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - MONGO_DB=telemetry
    depends_on:
      - mongodb

  telemetry-listener-service:
    image: blue_origin/telemetry-listener-service
    container_name: telemetry-listener-container
    build: 
      context: .
      dockerfile: ./back/telemetry-listener-service/Dockerfile
    expose:
      - "3007"
    ports:
      - "3007:3007"
    volumes:
      - ./container-logs:/usr/src/app/logs
    environment:
      - PORT=3007

  mission-service:
      image: blue_origin/mission-service
      container_name: mission-container
      build: 
        context: .
        dockerfile: ./back/mission-service/Dockerfile
      expose: 
        - "3002"
      ports:
        - "3002:3002"
      depends_on:
        - waitforservices1
        - mongodb
      volumes:
        - ./container-logs:/usr/src/app/logs
      environment:
        - PORT=3002
        - HOST_IP=kafka
        - PORT_KAFKA=9092
        - MONGO_HOST=localhost
        - MONGO_PORT=27018
        - MONGO_DB=mission
        - HOST_MISSIONS_COORDINATOR=localhost
        - PORT_MISSIONS_COORDINATOR=3008

  weather-service:
      image: blue-origin/weather-service
      container_name: weather-container
      build: 
        context: .
        dockerfile: ./back/weather-service/Dockerfile
      expose: 
        - "3001"
      ports:
        - "3001:3001"
      volumes:
        - ./container-logs:/usr/src/app/logs
      environment:
        - PORT=3001
      depends_on:
        - mongodb

  real-time-service:
      image: blue-origin/real-time-service
      container_name: real-time-container
      build:
        context: .
        dockerfile: ./back/real-time-service/Dockerfile
      expose:
        - "3006"
      ports:
        - "3006:3006"
      volumes:
        - ./container-logs:/usr/src/app/logs
      environment:
        - PORT=3006
        - HOST_IP=kafka
        - PORT_KAFKA=9092

  rocket-service:
      image: blue-origin/rocket-service
      container_name: rocket-container
      build: 
        context: .
        dockerfile: ./back/rocket-service/Dockerfile
      expose: 
        - "3000"
      ports:
        - "3000:3000"
      volumes:
        - ./container-logs:/usr/src/app/logs
      environment:
        - PORT=3000
        - PORT_HTTP=3011
        - HOST_TELEMETRY=telemetry-listener-service
        - PORT_TELEMETRY=3007
        - HOST_BOOSTER=booster-service
        - PORT_BOOSTER=3004
        - HOST_MISSION=mission-service
        - PORT_MISSION=3002
        - HOST_IP=kafka
      depends_on:
        - telemetry-listener-service
        - mongodb
  
  booster-service:
    image: blue-origin/booster-service
    container_name: booster-container
    build: 
      context: .
      dockerfile: ./back/booster-service/Dockerfile
    expose: 
      - "3004"
    ports:
      - "3004:3004"
    volumes:
      - ./container-logs:/usr/src/app/logs
    environment:
      - PORT=3004
      - PORT_HTTP=3010
      - HOST_ROCKET=rocket-service
      - PORT_ROCKET=3000
      - HOST_TELEMETRY=telemetry-listener-service
      - PORT_TELEMETRY=3007
      - HOST_MISSION=mission-service
      - PORT_MISSION=3002
      - HOST_IP=kafka
    
    depends_on:
      - mongodb


  payload-service:
    image: blue_origin/payload-service
    container_name: payload-container
    build: 
      context: .
      dockerfile: ./back/payload-service/Dockerfile
    expose:
      - "3005"
    ports:
      - "3005:3005"
    volumes:
      - ./container-logs:/usr/src/app/logs
    environment:
      - PORT=3005
      - PORT_HTTP=3011
      - HOST_TELEMETRY=telemetry-listener-service
      - PORT_TELEMETRY=3007
      - HOST_MISSION=mission-service
      - PORT_MISSION=3002

  anomaly-handler-service:
    image: blue_origin/anomaly-handler-service
    container_name: anomaly-handler-container
    build: 
      context: .
      dockerfile: ./back/anomaly-handler-service/Dockerfile
    expose:
      - "3013"
    ports:
      - "3013:3013"
    volumes:
      - ./container-logs:/usr/src/app/logs
    environment:
      - PORT=3013
      - HOST_IP=kafka
      - HOST_BOOSTER_SOAP=booster-service
      - PORT_BOOSTER_SOAP=3004
      - PORT_ROCKET_SOAP=rocket-service
      - HOST_ROCKET_SOAP=3000
      - HOST_MISSION=mission-service
      - PORT_MISSION=3002

  telemetry-analyser-service:
    image: blue_origin/telemetry-analyser-service
    container_name: telemetry-analyser-container
    build:
      context: .
      dockerfile: back/telemetry-analyser-service/Dockerfile
    expose:
      - "3009"
    ports:
      - "3009:3009"
    volumes:
      - ./container-logs:/usr/src/app/logs
    environment:
      - PORT=3009
      - HOST_IP=kafka
  
  missions-coordinator-service:
    image: blue_origin/missions-coordinator-service
    container_name: missions-coordinator-container
    build:
      context: .
      dockerfile: ./back/missions-coordinator-service/Dockerfile
    expose:
      - "3008"
    ports:
      - "3008:3008"
    volumes:
      - ./container-logs:/usr/src/app/logs
    environment:
      #Listening Port
      - PORT=3008
      - HOST_BOOSTER=booster-service
      - PORT_BOOSTER=3004
      - HOST_MISSION=mission-service
      - PORT_MISSION=3002
      - HOST_HEAD_STAGES=rocket-service
      - PORT_HEAD_STAGES=3011
      - HOST_PAYLOAD=payload-service
      - PORT_PAYLOAD=3005
      - HOST_REAL_TIME=real-time-service
      - PORT_REAL_TIME=3006
      - HOST_POLL=poll-service
      - PORT_POLL=3012

  poll-service:
    image: blue_origin/poll-service
    container_name: poll-container
    build:
      context: .
      dockerfile: ./back/poll-service/Dockerfile
    expose:
      - "3012"
    ports:
      - "3012:3012"
    volumes:
      - ./container-logs:/usr/src/app/logs
    environment:
      #Listening Port
      - PORT=3012
      - HOST_IP=kafka

  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"
  kafka:
    image: wurstmeister/kafka:2.11-1.1.1
    ports:
      - "9092:9092"
    expose:
      - "9092"
    links:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 100
      #KAFKA_ADVERTISED_HOST_NAME: ${HOST_IP}
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'


  front:
      image: blue-origin/front
      container_name: front-container
      ports:
        - "8080:8080"
      build: 
        context: .
        dockerfile: ./front/Dockerfile
      environment:
      ## For integrated test
        - REACT_APP_HOST_ROCKET=rocket-service
        - REACT_APP_PORT_ROCKET=3000
        - REACT_APP_HOST_WEATHER=weather-service
        - REACT_APP_PORT_WEATHER=3001
        - REACT_APP_HOST_MISSION=mission-service
        - REACT_APP_PORT_MISSION=3002
        - REACT_APP_HOST_TELEMETRY=telemetry-writer-service
        - REACT_APP_PORT_TELEMETRY=3003
        - REACT_APP_HOST_BOOSTER=booster-service
        - REACT_APP_PORT_BOOSTER=3004
        - REACT_APP_HOST_PAYLOAD=payload-service
        - REACT_APP_PORT_PAYLOAD=3005
        - REACT_APP_HOST_TELEMETRY_ANALYSER=telemetry-analyser-service
        - REACT_APP_PORT_TELEMETRY_ANALYSER=3009
        - REACT_APP_HOST_MISSIONS_COORDINATOR=missions-coordinator-service
        - REACT_APP_PORT_MISSIONS_COORDINATOR=3008
        - REACT_APP_HOST_REAL_TIME=real-time-service
        - REACT_APP_PORT_REAL_TIME=3006
        - REACT_APP_HOST_POLL=poll-service
        - REACT_APP_PORT_POLL=3012
      ## For front
        # - REACT_APP_HOST_ROCKET=localhost
        # - REACT_APP_PORT_ROCKET=3000
        # - REACT_APP_HOST_WEATHER=localhost
        # - REACT_APP_PORT_WEATHER=3001
        # - REACT_APP_HOST_MISSION=localhost
        # - REACT_APP_PORT_MISSION=3002
        # - REACT_APP_HOST_TELEMETRY=localhost
        # - REACT_APP_PORT_TELEMETRY=3003
        # - REACT_APP_HOST_BOOSTER=localhost
        # - REACT_APP_PORT_BOOSTER=3004
        # - REACT_APP_HOST_PAYLOAD=localhost
        # - REACT_APP_PORT_PAYLOAD=3005
        # - REACT_APP_HOST_TELEMETRY_ANALYSER=localhost
        # - REACT_APP_PORT_TELEMETRY_ANALYSER=3009
        # - REACT_APP_HOST_MISSIONS_COORDINATOR=localhost
        # - REACT_APP_PORT_MISSIONS_COORDINATOR=3008
        # - REACT_APP_HOST_REAL_TIME=localhost
        # - REACT_APP_PORT_REAL_TIME=3006
        # - REACT_APP_HOST_POLL=localhost
        # - REACT_APP_PORT_POLL=3012
      # Uncommente below if you want to build all these service when building front
      depends_on:
        - rocket-service
        - weather-service
        - mission-service
        - telemetry-writer-service
        - booster-service
        - payload-service
        - waitforservices3
        - real-time-service
      stdin_open: true
      tty: true
      