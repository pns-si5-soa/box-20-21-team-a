version: "3"



services:
  mongodb:
    image: mongo:latest
    container_name: mongodb
    hostname: mongodb
    volumes:
        - ./.docker/mongodb/initdb.d/:/docker-entrypoint-initdb.d/
        - ./.docker/mongodb/data/db/:/data/db/
        - ./.docker/mongodb/data/log/:/var/log/mongodb/
    environment:
        MONGO_INITDB_ROOT_USERNAME: ""
        MONGO_INITDB_ROOT_PASSWORD: ""
        MONGO_INITDB_DATABASE: "telemetry"
    expose: 
        - "27018"
    ports:
        - "27018:27017"
  
  waitforservices1:
    image: dadarek/wait-for-dependencies
    depends_on:
      - zookeeper 
    command: zookeeper:2181
    


  waitforservices2:
    image: dadarek/wait-for-dependencies
    depends_on:
      - kafka 
    command: kafka:9092
    

  
  waitforservices3:
    image: dadarek/wait-for-dependencies
    depends_on:
      - rocket-service
      - weather-service 
      - mission-service
      - booster-service
      - payload-service
      - real-time-service
      - waitforservices1
      - waitforservices2
    command: rocket-service:3000 weather-service:3001 mission-service:3002 booster-service:3004 payload-service:3005 real-time-service:3006
    

  telemetry-service:
    image: blue_origin/telemetry-service
    container_name: telemetry-container
    build: 
      context: .
      dockerfile: ./back/telemetry-service/Dockerfile
    expose:
      - "3003"
    ports:
      - "3003:3003"
    volumes:
      - ./container-logs:/usr/src/app/logs
    environment:
      - PORT=3003
      - MONGO_HOST=localhost
      - MONGO_PORT=27018
      - MONGO_DB=telemetry
    depends_on:
      - mongodb

  mission-service:
      image: blue_origin/mission-service
      container_name: mission-container
      build: 
        context: .
        dockerfile: ./back/mission-service/Dockerfile
      expose: 
        - "3002"
      ports:
        - "3002:3002"
      depends_on:
        - waitforservices1
      volumes:
        - ./container-logs:/usr/src/app/logs
      environment:
        - PORT=3002
        - HOST_IP=kafka
        - PORT_KAFKA=9092
      
      depends_on:
        - mongodb

  weather-service:
      image: blue-origin/weather-service
      container_name: weather-container
      build: 
        context: .
        dockerfile: ./back/weather-service/Dockerfile
      expose: 
        - "3001"
      ports:
        - "3001:3001"
      volumes:
        - ./container-logs:/usr/src/app/logs
      environment:
        - PORT=3001
      depends_on:
        - mongodb

  real-time-service:
      image: blue-origin/real-time-service
      container_name: real-time-container
      build:
        context: .
        dockerfile: ./back/real-time-service/Dockerfile
      expose:
        - "3006"
      ports:
        - "3006:3006"
      volumes:
        - ./container-logs:/usr/src/app/logs
      environment:
        - PORT=3006
        - HOST_IP=kafka
        - PORT_KAFKA=9092
      


  rocket-service:
      image: blue-origin/rocket-service
      container_name: rocket-container
      build: 
        context: .
        dockerfile: ./back/rocket-service/Dockerfile
      expose: 
        - "3000"
      ports:
        - "3000:3000"
      volumes:
        - ./container-logs:/usr/src/app/logs
      environment:
        - PORT=3000
        - HOST_TELEMETRY=telemetry-service
        - PORT_TELEMETRY=3003
        - HOST_BOOSTER=booster-service
        - PORT_BOOSTER=3004
        - HOST_MISSION=mission-service
        - PORT_MISSION=3002
      depends_on:
        - telemetry-service
        - mongodb
  
  booster-service:
    image: blue-origin/booster-service
    container_name: booster-container
    build: 
      context: .
      dockerfile: ./back/booster-service/Dockerfile
    expose: 
      - "3004"
    ports:
      - "3004:3004"
    volumes:
      - ./container-logs:/usr/src/app/logs
    environment:
      - PORT=3004
      - HOST_ROCKET=rocket-service
      - PORT_ROCKET=3000
      - HOST_TELEMETRY=telemetry-service
      - PORT_TELEMETRY=3003
      - HOST_MISSION=mission-service
      - PORT_MISSION=3002
    
    depends_on:
      - mongodb


  payload-service:
    image: blue_origin/payload-service
    container_name: payload-container
    build: 
      context: .
      dockerfile: ./back/payload-service/Dockerfile
    expose:
      - "3005"
    ports:
      - "3005:3005"
    volumes:
      - ./container-logs:/usr/src/app/logs
    environment:
      - PORT=3005
      - HOST_TELEMETRY=telemetry-service
      - PORT_TELEMETRY=3003
    

  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"
  kafka:
    image: wurstmeister/kafka:2.11-1.1.1
    ports:
      - "9092:9092"
    links:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 100
      #KAFKA_ADVERTISED_HOST_NAME: ${HOST_IP}
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
    
    


  front:
      image: blue-origin/front
      container_name: front-container
      ports:
        - "8080:8080"
      build: 
        context: .
        dockerfile: ./front/Dockerfile
      environment:
        - HOST_ROCKET=rocket-service
        - PORT_ROCKET=3000
        - HOST_WEATHER=weather-service
        - PORT_WEATHER=3001
        - HOST_MISSION=mission-service
        - PORT_MISSION=3002
        - HOST_TELEMETRY=telemetry-service
        - PORT_TELEMETRY=3003
        - HOST_BOOSTER=booster-service
        - PORT_BOOSTER=3004
        - HOST_PAYLOAD=payload-service
        - PORT_PAYLOAD=3005
      # Uncommente below if you want to build all these service when building front
      #depends_on:
        #- rocket-service
        #- weather-service
        #- mission-service
        #- telemetry-service
        #- booster-service
        #- payload-service
        #- waitforservices3
        #- real-time-service
      stdin_open: true
      tty: true
      